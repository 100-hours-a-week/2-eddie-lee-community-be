name: Push Backend Container to AWS ECR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  set_env-and-push-container:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set env
      run: |
        echo "DB_HOST=${{secrets.DB_HOST}}" > .env
        echo "DB_ID=${{secrets.DB_ID}}" >> .env
        echo "DB_PASS=${{secrets.DB_PASSWD}}" >> .env
        echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
        echo "DATABASE=${{secrets.DB_NAME}}" >> .env
        echo "PROJECT_ROOT=<dynamic>" >> .env
        echo "PORT=${{secrets.BACKEND_PORT}}" >> .env
        echo "CORS_URL=${{secrets.CORS_URL}}" >> .env
        echo "CDN_URL=${{secrets.CDN_URL}}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" >> .env
        echo "AWS_REGION=${{secrets.AWS_REGION}}" >> .env
        echo "AWS_S3_BUCKET_NAME=${{secrets.AWS_S3_BUCKET_NAME}}" >> .env
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{secrets.AWS_REGION}}
    - name: AWS ECR Login
      run: aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{secrets.AWS_ACCOUNT}}
    - name: Push Container
      run: |
        VERSION=$(date +'%Y%m%d%H%M%S')
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          -t ${{secrets.AWS_ACCOUNT}}/community:backend-$VERSION \
          -t ${{secrets.AWS_ACCOUNT}}/community:backend-latest .
    #Beanstalk 배포 추가

    - name: Create Beanstalk File
      run: zip -r app.zip Dockerrun.aws.json docker-compose.yml
    #배포된 환경의 CNAME 조회
    - name: Check Green Environment
      id: check_env
      run: |
        ACTIVE_CNAME=$(aws elasticbeanstalk describe-environments \
          --application-name webserver \
          --query "Environments[?Status=='Ready'].[CNAME]" \
          --output text)
        echo "Active CNAME is $ACTIVE_CNAME"
        BLUE_ENV=$(aws elasticbeanstalk describe-environments \
          --application-name webserver \
          --query "Environments[?Status=='Ready' && CNAME=='Webserver-env.eba-hnmitjzy.ap-northeast-2.elasticbeanstalk.com'].[EnvironmentName]" \
          --output text)
        if [ -z "$BLUE_ENV" ]; then
          echo "Error: Could not determine active environment."
          exit 1
        fi
          echo "active_environment=$BLUE_ENV" >> $GITHUB_OUTPUT

    #배포할 환경 이름
    - name: Choose Env
      id: choose_env
      run: |
        if [[ "${{ steps.check_env.outputs.active_environment }}" == "Webserver-env" ]]; then
          TARGET_ENV="Webserver-env-Green"
          CURRENT_ENV="Webserver-env"
        else
          TARGET_ENV="Webserver-env"
          CURRENT_ENV="Webserver-env-Green"
        fi
        echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
        echo "current_environment=$CURRENT_ENV" >> $GITHUB_OUTPUT
    - name: Upload app.zip to S3
      run: |
        aws s3 cp app.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/app.zip
    - name: Create new application version
      id: create_version
      run: |
        VERSION=$(date +'%Y%m%d%H%M%S')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        aws elasticbeanstalk create-application-version \
          --application-name webserver \
          --version-label $VERSION \
          --source-bundle S3Bucket=${{ secrets.AWS_S3_BUCKET_NAME }},S3Key=app.zip
    #선택한 환경에 배포
    - name: Deploy App
      run: |
        echo "Deploying to ${{ steps.choose_env.outputs.target_environment }}"
        aws elasticbeanstalk update-environment \
          --environment-name "${{ steps.choose_env.outputs.target_environment }}" \
          --version-label ${{ steps.create_version.outputs.version }}
    #Green 환경 기다리기
    - name: Wait for Green Env
      run: |
        aws elasticbeanstalk wait environment-updated \
          --application-name webserver \
          --environment-name ${{ steps.choose_env.outputs.target_environment }}
    #Blue-Green CNAME 스왑
    - name: Swap Blue-Green
      run: |
        aws elasticbeanstalk swap-environment-cnames \
          --source-environment-name ${{ steps.choose_env.outputs.current_environment }} \
          --destination-environment-name ${{ steps.choose_env.outputs.target_environment }}
